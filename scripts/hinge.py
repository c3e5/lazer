#!/usr/bin/env python
'''
Generate a g-code pattern to create hinge

Usage: hinge.py <x> <y> <w> <h> <spacing> <outfile> [--cut_feed=<cut_feed>] [--passing_feed=<passing_feed>]

x, y are the offset from (0, 0), it is negative (e.g. x=5 y=5 means (-5, -5))
w, h are the width and height of the hinge, respectively
spacing is the spacing between cuts, in mm (float), 0.5 will give a lot of flexibilty
'''
import logging
import docopt

from simplifier import PathSimplifier
from generator import GCodeGenerator


logging.basicConfig(level=logging.DEBUG)


class HingePattern(object):

    def __init__(self, height, width, spacing):
        self.height = height
        self.width = width
        self.spacing = spacing
        self.logger = logging.getLogger('HingePattern')

    def giterate(self, fn):
        '''
        Iterate over the generated vectors

        :type fn: func(srcx, srcy, dstx, dsty)
        :param fn: function to call on each iteration
        '''
        # all sizes in mm
        cut_length = 15
        skip_length = 4
        unit_length = cut_length + skip_length
        odd_shift = unit_length / 2
        minimal_width = unit_length * 2
        if self.width < minimal_width:
            raise Exception('width must be bigger than %d' % (minimal_width))
        odd_line = False
        y = 0
        while y < self.height:
            # go over the rows
            x = odd_shift if odd_line else 0
            while x < self.width:
                vector_start = (x, y)
                endx = x + cut_length
                if endx > self.width:
                    endx = self.width
                vector_end = (endx, y)
                vector = (vector_start, vector_end)
                fn(vector)
                x = x + unit_length
            y += self.spacing
            odd_line = not odd_line


def subtract(vectors, xsub, ysub):
    res = []
    for v in vectors:
        s, d = v
        sx, sy = s
        dx, dy = d
        res.append(((sx - xsub, sy - ysub), (dx - xsub, dy - ysub)))
    return res


def main():
    opts = docopt.docopt(__doc__)
    x = int(opts['<x>'])
    y = int(opts['<y>'])
    w = int(opts['<w>'])
    h = int(opts['<h>'])
    spacing = float(opts['<spacing>'])
    cut_feed = 600 if not opts['--cut_feed'] else int(opts['--cut_feed'])
    passing_feed = 800 if not opts['--passing_feed'] else int(opts['--passing_feed'])
    outfilename = opts['<outfile>']
    if not outfilename:
        outfilename = 'os_%f_%d_%d_%d_%d.ngc' % (spacing, h, w, x, y)
    logging.getLogger('MainApp').info('Gcode file name: %s' % (outfilename))
    p = HingePattern(height=h, width=w, spacing=spacing)
    s = PathSimplifier()
    comment = '''Generated by hinge.py with parameters:
spacing: %f
height: %d
width: %d''' % (spacing, h, w)
    g = GCodeGenerator(open(outfilename, 'w'), comment, cut_feed, passing_feed)
    p.giterate(s.add_vector)
    vectors = s.simplify()
    #
    # adjust all vectors to be negative only
    #
    vectors = subtract(vectors, x, y)
    g.generate(vectors)


if __name__ == '__main__':
    main()
