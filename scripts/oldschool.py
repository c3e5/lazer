#!/usr/bin/env python
'''
Generate a g-code pattern I used to draw in school

Usage: oldschool.py <RADIUS> <NUM_LINES> <NUM_POINTS> [<OUTFILE>]
'''
import logging
import math
import docopt

from simplifier import PathSimplifier
from generator import GCodeGenerator

from vectors import Point, Vector, add_to_vectors


logging.basicConfig(level=logging.DEBUG)


class OldSchoolPattern(object):

    def __init__(self, radius, nlines, npoints):
        '''
        :param radius: radius of the circle
        :param nlines: number of lines in the circle (from the center)
        :param npoints: number of points on each line
        '''
        self._radius = radius
        self._nlines = nlines
        self._npoints = npoints
        self._assertions()
        self._l = logging.getLogger('OldSchoolPattern')
        self._points = self._make_points()

    def _assertions(self):
        '''
        Make some checks on inputs params
        '''
        if self._radius <= 0:
            raise Exception('radius (%f) <= 0' % (self._radius))
        if self._nlines < 3:
            raise Exception('nlines (%d) < 3' % (self._nlines))
        if self._npoints < 2:
            raise Exception('npoints (%d) < 2' % (self._npoints))

    def _make_points(self):
        points = []
        angle = (2.0 * math.pi) / self._nlines  # radians
        self._l.debug('Base angle: %f' % angle)
        for i in range(self._nlines):
            iangle = angle * i
            # self.logger.info('[%d] angle: %f' % (i, iangle))
            # self.logger.info('[%d] (%f, %f)' % (i, math.cos(iangle), math.sin(iangle)))
            x = math.cos(iangle) * self._radius
            y = math.sin(iangle) * self._radius
            p = Point(x, y)
            self._l.debug('[%d] %s' % (i, p))
            points.append(p)
        return points

    def giterate(self, fn):
        '''
        Iterate over the generated vectors
        This method is simple, but the generated vector order is really inefficient.
        A simplifier should improve the result

        :type fn: func(srcx, srcy, dstx, dsty)
        :param fn: function to call on each iteration
        '''

        #
        # for each 2 adjacent vectors
        #
        for i in range(len(self._points)):
            s = self._points[i]
            d = self._points[(i + 1) % len(self._points)]
            self._l.debug('main vectors: %s' % Vector(s, d))
            sxst = s.x / self._npoints  # source x step
            syst = s.y / self._npoints  # source y step
            dxst = d.x / self._npoints  # dest x step
            dyst = d.y / self._npoints  # dest y step
            #
            # generate each internal vector
            #
            for p in range(1, self._npoints):
                sp = p  # current point in source
                dp = self._npoints - p  # current points in dest
                sx = sxst * sp
                sy = syst * sp
                dx = dxst * dp
                dy = dyst * dp
                s = Point(sx, sy)
                d = Point(dx, dy)
                fn(Vector(s, d))


def main():
    opts = docopt.docopt(__doc__)
    radius = float(opts['<RADIUS>'])
    nlines = int(opts['<NUM_LINES>'], 0)
    npoints = int(opts['<NUM_POINTS>'], 0)
    outfilename = opts['<OUTFILE>']
    if not outfilename:
        outfilename = 'os_%f_%d_%d.ngc' % (radius, nlines, npoints)
    logging.getLogger('MainApp').info('Gcode file name: %s' % (outfilename))

    p = OldSchoolPattern(radius=radius, nlines=nlines, npoints=npoints)
    s = PathSimplifier()
    comment = '''Generated by oldschool.py with parameters:
Radius: %f
Number of lines: %d
Number of points/line: %d''' % (radius, nlines, npoints)
    g = GCodeGenerator(open(outfilename, 'w'), comment)
    p.giterate(s.add_vector)
    vectors = s.simplify()
    #
    # adjust all vectors to be negative only
    #
    vectors = add_to_vectors(vectors, -Point(radius, radius))
    g.generate(vectors)


if __name__ == '__main__':
    main()
